"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.load = void 0;
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var bodySegmentation = require("@tensorflow-models/body-segmentation");
var tfconv = require("@tensorflow/tfjs-converter");
var tf = require("@tensorflow/tfjs-core");
var image_utils_1 = require("../shared/calculators/image_utils");
var mask_util_1 = require("../shared/calculators/mask_util");
var segment_foreground_1 = require("./calculators/segment_foreground");
var estimator_utils_1 = require("./estimator_utils");
var ARPortraitDepthMap = /** @class */ (function () {
    function ARPortraitDepthMap(depthTensor) {
        this.depthTensor = depthTensor;
    }
    ARPortraitDepthMap.prototype.toCanvasImageSource = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, mask_util_1.toHTMLCanvasElementLossy)(this.depthTensor)];
            });
        });
    };
    ARPortraitDepthMap.prototype.toArray = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.depthTensor.arraySync()];
            });
        });
    };
    ARPortraitDepthMap.prototype.toTensor = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.depthTensor];
            });
        });
    };
    ARPortraitDepthMap.prototype.getUnderlyingType = function () {
        return 'tensor';
    };
    return ARPortraitDepthMap;
}());
var TRANSFORM_INPUT_IMAGE = (0, image_utils_1.transformValueRange)(0, 255, 0, 1);
var PORTRAIT_HEIGHT = 256;
var PORTRAIT_WIDTH = 192;
/**
 * ARPortraitDepth estimator class.
 */
var ARPortraitDepthEstimator = /** @class */ (function () {
    function ARPortraitDepthEstimator(segmenter, estimatorModel) {
        this.segmenter = segmenter;
        this.estimatorModel = estimatorModel;
    }
    /**
     * Estimates depth for an image or video frame.
     *
     * It returns a depth map of the same number of values as input pixels.
     *
     * @param image
     * ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement The input
     * image to feed through the network.
     *
     * @param config Optional.
     *       minDepth: The minimum depth value for the model to map to 0. Any
     * smaller depth values will also get mapped to 0.
     *
     *       maxDepth`: The maximum depth value for the model to map to 1. Any
     * larger depth values will also get mapped to 1.
     *
     *       flipHorizontal: Optional. Default to false. When image data comes
     * from camera, the result has to flip horizontally.
     *
     * @return `DepthMap`.
     */
    ARPortraitDepthEstimator.prototype.estimateDepth = function (image, estimationConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var config, image3d, _a, height, width, segmentations, segmentation, segmentationTensor, depthTensor;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        config = (0, estimator_utils_1.validateEstimationConfig)(estimationConfig);
                        if (image == null) {
                            this.reset();
                            return [2 /*return*/, null];
                        }
                        image3d = tf.tidy(function () {
                            var imageTensor = tf.cast((0, image_utils_1.toImageTensor)(image), 'float32');
                            if (config.flipHorizontal) {
                                var batchAxis = 0;
                                imageTensor = tf.squeeze(tf.image.flipLeftRight(
                                // tslint:disable-next-line: no-unnecessary-type-assertion
                                tf.expandDims(imageTensor, batchAxis)), [batchAxis]);
                            }
                            return imageTensor;
                        });
                        _a = image3d.shape, height = _a[0], width = _a[1];
                        return [4 /*yield*/, this.segmenter.segmentPeople(image3d)];
                    case 1:
                        segmentations = _b.sent();
                        segmentation = segmentations[0];
                        return [4 /*yield*/, segmentation.mask.toTensor()];
                    case 2:
                        segmentationTensor = _b.sent();
                        depthTensor = tf.tidy(function () {
                            var maskedImage = (0, segment_foreground_1.segmentForeground)(image3d, segmentationTensor);
                            segmentationTensor.dispose();
                            // Normalizes the values from [0, 255] to [0, 1], same ranged used
                            // during training.
                            var imageNormalized = tf.add(tf.mul(maskedImage, TRANSFORM_INPUT_IMAGE.scale), 
                            // tslint:disable-next-line: no-unnecessary-type-assertion
                            TRANSFORM_INPUT_IMAGE.offset);
                            var imageResized = tf.image.resizeBilinear(imageNormalized, [PORTRAIT_HEIGHT, PORTRAIT_WIDTH]);
                            // Shape after expansion is [1, height, width, 3].
                            var batchInput = tf.expandDims(imageResized);
                            // Depth prediction (ouput shape is [1, height, width, 1]).
                            var depth4D = _this.estimatorModel.predict(batchInput);
                            // Normalize to user requirements.
                            var depthTransform = (0, image_utils_1.transformValueRange)(config.minDepth, config.maxDepth, 0, 1);
                            // depth4D is roughly in [0,2] range, so half the scale factor to put it
                            // in [0,1] range.
                            var scale = depthTransform.scale / 2;
                            var result = 
                            // tslint:disable-next-line: no-unnecessary-type-assertion
                            tf.add(tf.mul(depth4D, scale), depthTransform.offset);
                            // Keep in [0,1] range.
                            var resultClipped = tf.clipByValue(result, 0, 1);
                            // Rescale to original input size.
                            var resultResized = tf.image.resizeBilinear(resultClipped, [height, width]);
                            // Remove channel dimension.
                            // tslint:disable-next-line: no-unnecessary-type-assertion
                            var resultSqueezed = tf.squeeze(resultResized, [0, 3]);
                            return resultSqueezed;
                        });
                        image3d.dispose();
                        return [2 /*return*/, new ARPortraitDepthMap(depthTensor)];
                }
            });
        });
    };
    ARPortraitDepthEstimator.prototype.dispose = function () {
        this.segmenter.dispose();
        this.estimatorModel.dispose();
    };
    ARPortraitDepthEstimator.prototype.reset = function () {
        this.segmenter.reset();
    };
    return ARPortraitDepthEstimator;
}());
/**
 * Loads the ARPortraitDepth model.
 *
 * @param modelConfig ModelConfig object that contains parameters for
 * the ARPortraitDepth loading process. Please find more details of each
 * parameters in the documentation of the `ARPortraitDepthModelConfig`
 * interface.
 */
function load(modelConfig) {
    return __awaiter(this, void 0, void 0, function () {
        var config, depthModelFromTFHub, depthModel, segmenter;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    config = (0, estimator_utils_1.validateModelConfig)(modelConfig);
                    depthModelFromTFHub = typeof config.depthModelUrl === 'string' &&
                        (config.depthModelUrl.indexOf('https://tfhub.dev') > -1);
                    return [4 /*yield*/, tfconv.loadGraphModel(config.depthModelUrl, { fromTFHub: depthModelFromTFHub })];
                case 1:
                    depthModel = _a.sent();
                    return [4 /*yield*/, bodySegmentation.createSegmenter(bodySegmentation.SupportedModels.MediaPipeSelfieSegmentation, { runtime: 'tfjs', modelUrl: config.segmentationModelUrl })];
                case 2:
                    segmenter = _a.sent();
                    return [2 /*return*/, new ARPortraitDepthEstimator(segmenter, depthModel)];
            }
        });
    });
}
exports.load = load;
//# sourceMappingURL=estimator.js.map